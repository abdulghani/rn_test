name: RN CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  install_dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: restore node_modules cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: |
            node_modules
      - name: install latest npm
        run: |
          npm install -g npm &&
          echo "CURRENT NPM VERSION ($(npm --version))" &&
          npm list -g --depth 0
      - name: install dependencies
        run: |
          npm install

  lint:
    needs:
      - install_dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: restore node_modules cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: |
            node_modules
      - name: lint (CHECK FOR WARNINGS âœ‹)
        run: ./node_modules/.bin/npm run lint:all

  tests:
    needs:
      - install_dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: restore node_modules cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: |
            node_modules
      - name: run tests
        run: ./node_modules/.bin/npm run test:ci

  build_ios:
    needs:
      - install_dependencies
      - lint
      - tests
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
          check-latest: true
      - name: restore node_modules cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: |
            node_modules
      - name: install latest npm
        run: |
          npm install -g npm &&
          echo "CURRENT NPM VERSION ($(npm --version))" &&
          npm list -g --depth 0
      - name: install dependencies
        run: |
          npm install
      - name: install pods
        run: bash ./.scripts/ios-podinstall.sh
  
  release:
    needs:
      - install_dependencies
      - lint
      - tests
    runs-on: ubuntu-latest
    environment:
      name: CREATE_RELEASE
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
          check-latest: true
      - name: restore node_modules cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: |
            node_modules
      - name: configure git
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com" &&
          git config --global user.name "GitHub Actions"
      - name: create release
        run: |
          npm run release
      - name: push tags
        env:
          GITHUB_TOKEN: ${{ SECRETS.CI_ACCESS_TOKEN }}
        run: |
          git push --follow-tags origin ${{ GITHUB.GITHUB_REF_NAME }}

  bugfix_release:
    needs:
      - install_dependencies
      - lint
      - tests
    runs-on: ubuntu-latest
    environment:
      name: CREATE_BUGFIX_RELEASE
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
          check-latest: true
      - name: restore node_modules cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: |
            node_modules
      - name: configure git
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com" &&
          git config --global user.name "GitHub Actions"
      - name: create release
        run: |
          npm run release:bugfix
      - name: push tags
        env:
          GITHUB_TOKEN: ${{ SECRETS.CI_ACCESS_TOKEN }}
        run: |
          git push --follow-tags origin ${{ GITHUB.GITHUB_REF_NAME }}


